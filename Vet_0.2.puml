@startuml VetHotel

class HotelManager{
    - _hotel: Hotel
    - _file: String

    ' Hotel management
    + createHotel(): void
    + loadHotel(file: String): void
    + saveHotel(): void

    ' Main Menu
    + progressSeason(): SeasonType
    + satisfaction(): int
}

class Hotel{
    - _habitats: Map<String, Habitat>
    - _workers: Map<String, Worker>
    - _species: Map<String, Species>
    - _animals: Map<String, Animal>
    - _vaccines: Map<String, Vaccine>
    - _vaccineRegistry: VaccineRegistry[]
    - _trees: Map<String, Tree>

    ' Check how to notify tree listeners.
    - _season: SeasonType

    ' Main Menu called from HotelManager._hotel.command()
    + progressSeason(): SeasonType
    + satisfaction(): int

    ' Secondary Menus 4.2
    + animals(): Animal[]
    + addAnimal(id: String, name: Name, idSpecies: String, idHabitat: String): Animal
    + transferAnimal(idAnimal: String, idHabitat: String): void
    + animalSatisfaction(id: String): int

    ' Secondary Menus 4.3
    + workers(): Worker[]
    + addWorker(id: String, name: String, type: String): void
    + addResponsibilityToWorker(idWorker: String, idResponsibility: String): void
    + removeResponsibilityFromWorker(idWorker: String, idResponsibility: String): void
    + workerSatisfaction(id: String): int

    ' Secondary Menus 4.4
    + habitats(): Habitat[]
    + addHabitats(id: String, name: String, area: int): void
    + changeHabitatArea(id: String, area: int): void
    + changeHabitatSuitability(id: String, idSpecies: String, influence: String): void
    + addTreeToHabitat(idHabitat: String, idTree: String, name: String, age: int, cleanDiff: int, treeType: String): void
    + habitatTrees(id: String): void
    
    ' Secondary Menus 4.5
    + vaccines(): Vaccine[]
    + addVaccine(id: String, name: Name, idSpecies: String): void
    + vaccinateAnimal(idAnimal: String, idVaccine: String, idVet: String): void
    + vaccineRegistry(): VaccineRegistry[]

    ' Secondary Menus 4.6
    + habitatAnimals(id: String): Animal[]
    + animalVaccines(id: String): VaccineRegistry[]
    + vetVaccines(id: String): VaccineRegistry[]
    + filterWrongVaccinations(): VaccineRegistry[]  

    ' Searches
    + animalExistsException(id: String): Exception
    + animalExists(id: String): Animal
    + speciesExistsException(id: String): Exception
    + speciesExists(id: String): Species
    + workerExistsException(id: String): Exception
    + workerExists(id: String): Worker
    + habitatExistsException(id: String): Exception
    + habitatExists(id: String): Worker
    + treeExistsException(id: String): Exception
    + treeExists(id: String): Tree
    + vaccineExistsException(id: String): Exception
    + vaccineExists(id: String): Vaccine
}

class Animal{
    - {final} _id: String
    - {final} _name: String
    - {final} _species: Specie
    - _vaccineRegistry: VaccineRegistry[]
    - _habitat: Habitat

    + Animal(id: String, name: String, species: Species, habitat: Habitat)

    + transferAnimal(idHabitat: String): void
    + satisfaction(): int
    + addVaccineRegistry(vaccineReg: VaccineRegistry): void

    + toString(): String
    + equals(animal: Animal): boolean
    + hashCode(): int
}

Class Tree{
    - {final} _id: String
    - {final} _name: String
    - _age: int
    - {final} _birthSeason: SeasonType
    - {final} _cleanDifficulty: int
    
    + Tree(id: String, name: String, age: int, birthSeason: SeasonType, cleanDiff: int)
    + getOlder(): void
    + totalCleaningEffort(): int

    # name(): String
    # age(): int
    # cleanDifficulty(): int

    - abstract leaftState(season: SeasonType): LeafState
    - abstract seasonalEffort(season: SeasonType): int 
    + abstract toString(): String
    + equals(tree: Tree): boolean
    + hashCode(): int
}

Class Evergreen extends Tree{
    - leaftState(season: SeasonType): LeafState
    - seasonalEffort(season: SeasonType): int
    + toString(): String
}

Class Deciduous extends Tree{
    - leaftState(season: SeasonType): LeafState
    - seasonalEffort(season: SeasonType): int
    + toString(): String
}

abstract class Worker{
    - {final} _id: String
    - {final} _name: String

    + abstract addResponsibility(responsibility: Responsibility): Void
    + abstract removeResponsibility(responsibility: Responsibility): void
    + abstract satisfaction(): int

    # name(): String

    + abstract toString(): String
    + equals(worker: Worker): boolean
    + hashCode(): int
}

class CareTaker extends Worker{
    - _responsibilities: Map<String, Habitat>

    + addResponsibility(responsibility: Responsibility): Void
    + removeResponsibility(responsibility: Responsibility): void
    + satisfaction(): int

    + toString(): String
}

class Vet extends Worker{
    - _responsibilities: Map<String, Species>

    + addResponsibility(responsibility: Responsibility): Void
    + removeResponsibility(responsibility: Responsibility): void
    + satisfaction(): int

    + vaccinate(animal: Animal, vaccine: Vaccine, hotel: Hotel): VaccineRegistry
    - calculateVaccineDamage(animal: Animal, vaccine: Vaccine): VaccineDamage
    - addVaccineRegistry(vaccineReg: VaccineRegistry): void

    + toString(): String
}

class Habitat{
    - {final} _id: String
    - {final} _name: String
    - _area: int
    - _trees: Map<String, Tree>
    - _suitability: Map<Species, Integer>
    - _animals: Map<Species, Map<String, Animal>>
    - _careTakers: Map<String, CareTakers>

    + id(): String

    + changeArea(area: int): void
    + changeSuitability(species: Species, suitability: int): void
    + addTree(tree: Tree, hotel: Hotel): void
    + trees(): Tree[]
    + animals(): Animal[]
    + addAnimal(): void
    + removeAnimal(): void
    + addCareTaker(): void
    + removeCareTaker(): void
    + toString(): String

}

class Species{
    - {final} _id: String
    - {final} _name: String
    - _animals: Map<String, Animal>
    - _vets: Map<String, Vet>

    + id(): String

    + addAnimal(animal: Animal): void
    + addVet(vet: Vet): void
    + removeVet(vet: Vet): void
    + removeAnimal(animal: Animal): void
    + equals(species: Species): boolean
}

Class Vaccine {
    - {final} _id: String
    - {final} _name: String
    - _applyCount: int
    - _species: Map<String, Species>
    + apply(): void
    + toString(): String
    + hashCode(): int
}

Class VaccineRegistry{
    - _vaccine: Vaccine
    - _vet: Vet
    - _species: Species
    - _animal: Animal
    - _vaccineDamage: VaccineDamage

    + VaccineRegistry(vaccine: Vaccine, vet: Vet, species: Species, animal: Animal, vaccineDamage: VaccineDamage)
    + vaccineDamage(): VaccineDamage
    + toString(): String
}

' Enums
enum VaccineDamage {
    NORMAL
    CONFUSION
    ACCIDENT
    ERROR
}

enum SeasonType {
    SPRING = 1
    SUMMER = 2
    FALL = 3
    WINTER = 4

    +next(): SeasonType
}

enum LeafState {
    WITHOUTLEAFS
    WITHLEAFS
    FALLINGLEAFS
    GENERATELEAVES
}

enum Influence{
    POS = 20
    NEG = 0
    NEU = -20
}

' Relationships


@enduml