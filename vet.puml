@startuml VetHotel

' + -> public
' - -> private
' # -> protected
' ~ -> package
' {static} -> shared added as a prefix
' {final} -> constant added as prefix
' *-- -> composition full tilted square
' o-- -> agregation empty tilter square
' -- -> association line
' ..> -> dependency dotted line

class HotelManager{
    - _hotel: Hotel
    - _file: String

    ' Hotel management
    + createHotel(): void
    + loadHotel(file: String): void
    + saveHotel(): void

    ' These commands are repeated here, due to belonging to main menu
    + progressSeason(): SeasonType
    + satisfaction(): int
}

class Hotel{
    - _habitats: Map<String, Habitat>
    - _workers: Map<String, Worker>
    - _vaccines: Map<String, Vaccine>
    - _species: Map<String, Species>

    ' Check how to notify tree listeners.
    - _season: SeasonType

    - _vaccineLog: VaccineRegistry[]
    + printVaccineErr(): String
    + printVaccines(): String
    + printWorkers(): String
    + printAnimals(): String
    + printHabitats(): String
    + printSpecies(): String
    + addHabitat(id: String, name: Name): Habitat
    + findHabitat(id: String): Habitat
    + addWorker(id: String, name: Name, type: WorkerType): void
    + findWorker(id: String): Worker
    + addVaccine(id: String, name: Name): Vaccine
    + addSpecies(id: String, name: Name): Specie
    + findSpecies(id: String)

    ' Species have animals... should species have addAnimal() or here?
    
    + progressSeason(): void
    + satisfaction(): int
}

class Habitat{
    - {final} _id: String
    - {final} _name: String
    - _area: int
    - _trees: Map<String, Tree>
    - _animals: Map<Species, Map<String, Animal>>
    - _suitability: Map<Species, Integer>
    - _careTakers: Map<String, CareTaker>

    + animalExists(animal: Animal): boolean
    + suitability(species: Species): int
    + careTakerCount(): int
    + changeSuitability(species: Species, suitability: int): void
    + addAnimal(animal: Animal): void
    + removeAnimal(animal: Animal): void
    + addTree(tree: Tree): void
    + removeTree(tree: Tree): void
    + print(): String
    + equals(habitat: Habitat): boolean
}

class Species{
    - {final} _id: int
    - {final} _name: String
    - {static} _counter: int
    - _animals: Map<String, Animal>
    - _vets: Map<String, Vets>
    + addAnimal(animal: Animal): void
    + removeAnimal(animal: Animal): void
    + animalExists(id: String): Animal
    + equals(species: Species): boolean
    + vetCounter(): int
}

class Animal{
    - {final} _id: String
    - {final} _name: String
    - {final} _species: Specie

    ' Should we have a healthlog here that saves the VaccineDamage?
    ' Or should we just use the VaccineRegistry in Hotel and
    ' filter for the specific animal?
    - _healthLog: String[]

    - _habitat: Habitat
    + satisfaction(): float
    + vaccineEvent(): void
    + transferAnimal(idHabitat: String): void
    + toString(): String
    + equals(animal: Animal): boolean
}

Class Tree{
    - {final} _id: String
    - {final} _name: String
    - _age: int
    - {final} _birthSeason: SeasonType
    - {final} _isEvergreen: boolean
    - _cleanDifficulty: int
    + leafState(season: SeasonType): LeafState
    + toString(): String
    + equals(tree: Tree): boolenan
}

abstract class Workers{
    # {final} _workerType: WorkerType
    # {final} _id: String
    # {final} _name: String
    + abstract satisfaction()
    + abstract toString(): String
    + abstract addResponsability(): Void
    + abstract removeResponsability(): 
    + equals(): boolean
}

class CareTaker extends Workers{
    - _habitats: Habitat[]
    + cleanHabitat(habitat: Habitat): void
    + satisfaction(): float
    + toString(): String
    + addResponsability(habitat: Habitat): void
    + removeResponsability(id: String): Void
}

class Vet extends Workers{
    - _species: Species[]
    + vaccinate(animal: Animal, vaccine: Vaccine): void
    + satisfaction(): float
    + toString(): String
    + addResponsability(): void
    + removeResponsability(): Void
}

Class Vaccine {
    - _id: String
    - _name: String
    - _species: Species[]
    - _applyCount: int
    + apply(animal: Animal, vet: Vet): void
    + print(): String
}

Class VaccineRegistry{
    - _vaccine: Vaccine
    - _vet: Vet
    - _species: Species
    - _animal: Animal
    - _vaccineDamage: VaccineDamage
}


enum VaccineDamage {
    NORMAL
    CONFUSION
    ACCIDENT
    ERROR
}

enum SeasonType {
    SPRING
    SUMMER
    FALL
    WINTER
}

enum LeafState {
    WITHOUTLEAFS
    WITHLEAFS
    FALLINGLEAFS
    GENERATELEAFS
}

enum WorkerType {
    VET
    TRT
}

' Relationships
HotelManager *-- Hotel

Hotel *--  Habitat
Hotel o-- Workers
Hotel o-- Vaccine
Hotel o-- Species

Habitat *-- Tree
Habitat -- Animal
Habitat -- CareTaker

Species *-- Animal
Species -- Vet

Animal -- Species

Tree -- Habitat

CareTaker -- Habitat

Vet -- Species

Vaccine -- Species
Vaccine -- Vet

' Vacinas podem existir sem existencia de um Vet? Devo guardar num singleton? por hotel
' A estação do ano é sempre a mesma sobre todos os Veterinarios no mundo? ou podemos ter varias? se não fica como singleton. por hotel
' Especies podem existir fora de um Vet? se sim devo guardar num singleton? para que possam ser utilizadas noutros vets sem ter de as registar denovo? por hotel.
@enduml