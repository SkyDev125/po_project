@startuml VetHotel

class HotelManager{
    - _file: String

    ' Hotel management
    + createHotel(): void
    + loadHotel(file: String): void
    + saveHotel(): void

    ' Main Menu
    + progressSeason(): SeasonType
    + satisfaction(): int
}

class Hotel{
    ' Check how to notify tree listeners.
    - _season: SeasonType

    ' Main Menu called from HotelManager._hotel.command()
    + progressSeason(): SeasonType
    + satisfaction(): int

    ' Secondary Menus 4.2
    + animals(): Animal[]
    + addAnimal(id: String, name: Name, idSpecies: String, idHabitat: String): Animal
    + transferAnimal(idAnimal: String, idHabitat: String): void
    + animalSatisfaction(id: String): int

    ' Secondary Menus 4.3
    + workers(): Worker[]
    + addWorker(id: String, name: String, type: String): void
    + addResponsibilityToWorker(idWorker: String, idResponsibility: String): void
    + removeResponsibilityFromWorker(idWorker: String, idResponsibility: String): void
    + workerSatisfaction(id: String): int

    ' Secondary Menus 4.4
    + habitats(): Habitat[]
    + addHabitat(id: String, name: String, area: int): void
    + changeHabitatArea(id: String, area: int): void

    ' Devo meter influencia como o meu enum? e ter um if
    ' que decide qual enum significa a string na parte de execução
    ' do comando? ou aqui dentro.
    + changeHabitatSuitability(id: String, idSpecies: String, influence: String): void
    + addTreeToHabitat(idHabitat: String, idTree: String, name: String, age: int, cleanDiff: int, treeType: String): void
    + habitatTrees(id: String): Tree[]
    
    ' Secondary Menus 4.5
    + vaccines(): Vaccine[]
    + addVaccine(id: String, name: Name, idSpecies: String): void
    + vaccinateAnimal(idAnimal: String, idVaccine: String, idVet: String): void
    + vaccineRegistry(): VaccineRegistry[]

    ' Secondary Menus 4.6
    + habitatAnimals(id: String): Animal[]
    + animalVaccines(id: String): VaccineRegistry[]
    + vetVaccines(id: String): VaccineRegistry[]
    + filterWrongVaccinations(): VaccineRegistry[]  

    ' Searches
    + animalExists(id: String): Animal
    + speciesExists(id: String): Species
    + workerExists(id: String): Worker
    + habitatExists(id: String): Habitat
    + treeExists(id: String): Tree
    + vaccineExists(id: String): Vaccine
}

class Animal{
    - {final} _id: String
    - {final} _name: String

    + Animal(id: String, name: String, species: Species, habitat: Habitat)
    
    + transferAnimal(habitat: Habitat): void
    + satisfaction(): int
    + addVaccineRegistry(vaccineReg: VaccineRegistry): void
    + vaccineRegistry(): VaccineRegistry[]

    + toString(): String
    + equals(animal: Animal): boolean
    + hashCode(): int
}

class Species{
    - {final} _id: String
    - {final} _name: String

    + Species(id: String, name: String)
    
    + addAnimal(animal: Animal): void
    + addVet(vet: Vet): void
    + removeVet(vet: Vet): void
    + animalCount(): int
    + vetCount(): int

    + equals(species: Species): boolean
    + hashCode(): int
}

class Habitat{
    - {final} _id: String
    - {final} _name: String
    - _area: int
    - _suitability: Map<Species, Influence>

    + Habitat(id: String, name: String, area: int)

    + addAnimal(animal: Animal): void
    + removeAnimal(animal: Animal): void
    + animals(): animals[]
    + sameSpeciesCount(species: Species): int
    + speciesSuitability(species: Species): Influence
    + addCareTaker(careTaker: CareTaker): void
    + removeCareTaker(careTaker: CareTaker): void
    + careTakerCount(): int
    + calculateWork(): int
    + trees(): Tree[]
    + setArea(area: int): void
    + changeSuitability(species: Species, suitability: Influence): void
    + addTree(tree: Tree): void

    + equals(habitat: Habitat): boolean
    + hashCode(): int
    + toString(): String
}

abstract class Worker{
    - {final} _id: String
    - {final} _name: String

    + Worker(id: String, name: String)

    # name(): String
    
    + abstract addResponsibility(id: String): void
    + abstract removeResponsibility(id: String): void
    + abstract satisfaction(): int

    + equals(worker: Worker): boolean
    + hashCode(): int
    + abstract toString(): String
}

class CareTaker extends Worker{
    + CareTaker(id: String, name: String)
    
    + addResponsibility(id: String): void
    + removeResponsibility(id: String): void
    + satisfaction(): int

    + toString(): String
}

class Vet extends Worker{
    + Vet(id: String, name: String)
    
    + addResponsibility(id: String): void
    + removeResponsibility(id: String): void
    + satisfaction(): int
    + vaccinate(animal: Animal, vaccine: Vaccine): VaccineRegistry
    - calculateVaccineDamage(animal: Animal, vaccine: Vaccine): VaccineDamage
    - addVaccineRegistry(vaccineReg: VaccineRegistry): void
    + vaccineRegistry(): VaccineRegistry[]

    + toString(): String
}

Class Tree{
    - {final} _id: String
    - {final} _name: String
    - _age: int
    - {final} _birthSeason: SeasonType
    - {final} _cleanDifficulty: int

    + Tree(id: String, name: String, age: int, birthSeason: SeasonType, cleanDiff: int, hotel: Hotel)
    
    # name(): String
    # age(): int
    # cleanDifficulty(): int
    # hotel(): Hotel
    + totalCleaningEffort(): int

    - abstract seasonalEffort(): int 
    - abstract leaftState(): LeafState
    
    + equals(tree: Tree): boolean
    + hashCode(): int
    + abstract toString(): String
}

Class Evergreen extends Tree{
    + Evergreen(id: String, name: String, age: int, birthSeason: SeasonType, cleanDiff: int, hotel: Hotel)
    
    - seasonalEffort(): int
    - leaftState(): LeafState

    + toString(): String
}

Class Deciduous extends Tree{
    + Deciduous(id: String, name: String, age: int, birthSeason: SeasonType, cleanDiff: int, hotel: Hotel)
    
    - seasonalEffort(): int
    - leaftState(): LeafState

    + toString(): String
}

Class Vaccine {
    - {final} _id: String
    - {final} _name: String
    - _applyCount: int

    + Vaccine(id: String, name: String, species: Species[])
    
    + apply(): void

    + toString(): String
    + equals(vaccine: Vaccine): boolean
    + hashCode(): int
}

Class VaccineRegistry{
    - _vaccineDamage: VaccineDamage

    + VaccineRegistry(vaccine: Vaccine, vet: Vet, species: Species, animal: Animal, vaccineDamage: VaccineDamage)
    
    + vaccineDamage(): VaccineDamage
    
    + toString(): String
}

' Enums
enum VaccineDamage {
    NORMAL
    CONFUSION
    ACCIDENT
    ERROR
}

enum SeasonType {
    SPRING = 1
    SUMMER = 2
    FALL = 3
    WINTER = 4

    +next(): SeasonType
}

enum LeafState {
    WITHOUTLEAFS
    WITHLEAFS
    FALLINGLEAFS
    GENERATELEAVES
}

enum Influence{
    POS = 20
    NEG = 0
    NEU = -20
}

' Relationships
HotelManager "1" --> "1..*" Hotel: _hotel
Hotel "1" --> "*" Habitat: _habitats
Hotel "1" --> "*" Worker: _workers
Hotel "1" --> "*" Species: _species
Hotel "1" --> "*" Animal: _animals
Hotel "1" --> "*" Vaccine: _vaccines
Hotel "1" --> "*" VaccineRegistry: _vaccineRegistry
Hotel "1" -- "*" Tree: _trees
Animal "1" -- "*" VaccineRegistry: _vaccineRegistry
Species "1" -- "*" Animal: _animals
Species "*" -- "*" Vet: _vets
Habitat "1"-- "*" Animal: _animals
Habitat "*" -- "*" CareTaker: _careTakers
Habitat "1" --> "*" Tree: _trees
Vet "1" -- "*" VaccineRegistry: _vaccineRegistry
Vaccine "1" --> "*" Species: _species
VaccineRegistry "1" --> "1" Vaccine: _vaccine

@enduml