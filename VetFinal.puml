@startuml VetHotel

class HotelManager{
    - _file: String

    ' Hotel management
    + createHotel(): void
    + loadHotel(file: String): void
    + saveHotel(): void

    ' Main Menu
    + progressSeason(): SeasonType
    + satisfaction(): int
    + isModified(): boolean
}

class Hotel{
    ' Check how to notify tree listeners.
    - _season: SeasonType
    - _modified: boolean

    ' Main Menu called from HotelManager._hotel.command()
    + progressSeason(): SeasonType
    + satisfaction(): int

    ' Secondary Menus 4.2
    + animals(): Animal[]
    + addAnimal(id: String, name: Name, idSpecies: String, idHabitat: String): Animal
    + transferAnimal(idAnimal: String, idHabitat: String): void
    + animalSatisfaction(id: String): int

    ' Secondary Menus 4.3
    + workers(): Worker[]
    + addWorker(id: String, name: String, type: String): void
    + addResponsibilityToWorker(idWorker: String, idResponsibility: String): void
    + removeResponsibilityFromWorker(idWorker: String, idResponsibility: String): void
    + workerSatisfaction(id: String): int

    ' Secondary Menus 4.4
    + habitats(): Habitat[]
    + addHabitat(id: String, name: String, area: int): void
    + changeHabitatArea(id: String, area: int): void
    + changeHabitatSuitability(id: String, idSpecies: String, influence: Influence): void
    + addTreeToHabitat(idHabitat: String, idTree: String, name: String, age: int, cleanDiff: int, treeType: String): void
    + habitatTrees(id: String): Tree[]
    
    ' Secondary Menus 4.5
    + vaccines(): Vaccine[]
    + addVaccine(id: String, name: Name, idSpecies: String): void
    + vaccinateAnimal(idAnimal: String, idVaccine: String, idVet: String): void
    + vaccineRegistry(): VaccineRegistry[]

    ' Secondary Menus 4.6
    + habitatAnimals(id: String): Animal[]
    + animalVaccines(id: String): VaccineRegistry[]
    + vetVaccines(id: String): VaccineRegistry[]
    + filterWrongVaccinations(): VaccineRegistry[]  

    ' Searches
    ~ animalExistsException(id: String): Animal
    ~ animalExists(id: String): Animal
    ~ speciesExistsException(id: String): Species
    ~ speciesExists(id: String): Species
    ~ workerExistsException(id: String): Worker
    ~ workerExists(id: String): Worker
    ~ habitatExistsException(id: String): Habitat
    ~ habitatExists(id: String): Habitat
    ~ treeExistsException(id: String): Tree
    ~ treeExists(id: String): Tree
    ~ vaccineExistsException(id: String): Vaccine
    ~ vaccineExists(id: String): Vaccine
}

class Animal{
    - {final} _id: String
    - {final} _name: String
    
    ~ transferAnimal(habitat: Habitat): void
    ~ satisfaction(): int
    ~ addVaccineRegistry(vaccineReg: VaccineRegistry): void
    ~ vaccineRegistry(): VaccineRegistry[]

    + toString(): String
}

class Species{
    - {final} _id: String
    - {final} _name: String
    
    ~ addAnimal(animal: Animal): void
    ~ addVet(vet: Vet): void
    ~ removeVet(vet: Vet): void
    ~ animalCount(): int
    ~ vetCount(): int

    + equals(species: Species): boolean
    + hashCode(): int
}

class Habitat{
    - {final} _id: String
    - {final} _name: String
    - _area: int
    - _suitability: Map<Species, Influence>

    ~ addAnimal(animal: Animal): void
    ~ removeAnimal(animal: Animal): void
    ~ animals(): animals[]
    ~ sameSpeciesCount(species: Species): int
    ~ speciesSuitability(species: Species): Influence
    ~ addCareTaker(careTaker: CareTaker): void
    ~ removeCareTaker(careTaker: CareTaker): void
    ~ careTakerCount(): int
    ~ calculateWork(): int
    ~ trees(): Tree[]
    ~ setArea(area: int): void
    ~ changeSuitability(species: Species, suitability: Influence): void
    ~ addTree(tree: Tree): void

    + toString(): String
}

abstract class Worker{
    - {final} _id: String
    - {final} _name: String

    # name(): String
    
    ~ abstract addResponsibility(id: String): void
    ~ abstract removeResponsibility(id: String): void
    ~ abstract satisfaction(): int

    + abstract toString(): String
}

class CareTaker extends Worker{
    ~ addResponsibility(id: String): void
    ~ removeResponsibility(id: String): void
    ~ satisfaction(): int

    + toString(): String
}

class Vet extends Worker{
    ~ addResponsibility(id: String): void
    ~ removeResponsibility(id: String): void
    ~ satisfaction(): int
    ~ vaccinate(animal: Animal, vaccine: Vaccine): VaccineRegistry
    - calculateVaccineDamage(animal: Animal, vaccine: Vaccine): VaccineDamage
    - addVaccineRegistry(vaccineReg: VaccineRegistry): void
    ~ vaccineRegistry(): VaccineRegistry[]

    + toString(): String
}

Class Tree{
    - {final} _id: String
    - {final} _name: String
    - _age: int
    - {final} _birthSeason: SeasonType
    - {final} _cleanDifficulty: int

    # name(): String
    # age(): int
    # cleanDifficulty(): int
    # hotel(): Hotel
    ~ totalCleaningEffort(): int

    - abstract seasonalEffort(): int 
    - abstract leaftState(): LeafState
    
    + abstract toString(): String
}

Class Evergreen extends Tree{
    - seasonalEffort(): int
    - leaftState(): LeafState

    + toString(): String
}

Class Deciduous extends Tree{
    - seasonalEffort(): int
    - leaftState(): LeafState

    + toString(): String
}

Class Vaccine {
    - {final} _id: String
    - {final} _name: String
    - _applyCount: int

    ~ apply(): void
}

Class VaccineRegistry{
    - _vaccineDamage: VaccineDamage

    ~ vaccineDamage(): VaccineDamage
    
    + toString(): String
}

' Enums
enum VaccineDamage {
    NORMAL
    CONFUSION
    ACCIDENT
    ERROR
}

enum SeasonType {
    SPRING = 1
    SUMMER = 2
    FALL = 3
    WINTER = 4

    +next(): SeasonType
}

enum LeafState {
    WITHOUTLEAFS
    WITHLEAFS
    FALLINGLEAFS
    GENERATELEAVES
}

enum Influence{
    POS = 20
    NEG = 0
    NEU = -20
}

enum Influence{
    POS = 20
    NEG = 0
    NEU = -20
}

' Relationships
HotelManager "1" --> "*" Hotel: _hotel V
Hotel "1" --> "*" Habitat: _habitats V
Hotel "1" --> "*" Worker: _workers V
Hotel "1" --> "*" Species: _species v
Hotel "1" --> "*" Animal: _animals v
Hotel "1" --> "*" Vaccine: _vaccines v
Hotel "1" --> "*" VaccineRegistry: _vaccineRegistry v
Hotel "1" -- "*" Tree: _trees v
Animal "1" -- "*" VaccineRegistry: _vaccineRegistry V
Species "1" -- "*" Animal: _animals v
Species "*" -- "*" Vet: _vets v
Habitat "1"-- "*" Animal: _animals V
Habitat "*" -- "*" CareTaker: _careTakers V
Habitat "1" --> "*" Tree: _trees V
Vet "1" -- "*" VaccineRegistry: _vaccineRegistry V
Vaccine "1" --> "*" Species: _species V
VaccineRegistry "1" --> "1" Vaccine: _vaccine V

@enduml